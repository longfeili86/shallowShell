%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% memo: 
% bcTypes: 0 periodic; 1 simply supported; 2 clamped edge; 3 free edge; 4 CS; 5 CF

/
% Shell code usages:
%1. to run a test:
runShell -nx=20 -ny=20 -bcType=3 -savePlot -f=<folderName>
(we can run the code without plot using the option -noplot to save time 
or to run remotely on the server without forwarding any images. We can view
the results later locally by using plotSavedResults)

%2. to plot saved results
plotSavedResults -f=<resultsDir> (optional: -contour -nosave)

%3. to see performance profile
viewProfile -f=testResults

%4. to run a convergence study
convRate -case=<caseName> -test=<testName>  (optional -run -noplot)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
05/30/2017: rerun all the cases after bugs fixed for the free and cf bcs:
batchRun.pl -run=bifurcationPAC > batchRunBifurcationPAC.log
batchRun.pl -run=bifurcation > batchRunBifurcation.log


05/27 /2017: Pseudo-Arclength Continuation (PAC) method with dynamics choice of ds is working now. Need more test. 
use bifurcationPACRun -dxi=50 -bcType=1 ... to test the PAC method. So far seems working for byType=1,2,4


05/26/2017: try feed in picard solution to newton as ic to see if newton works for the nonuniform TL case for bcTypes=3,4,5

% exPicard
runShell -case=coupledSystem -nonlinear -saveIC -solver=exPicard -tol=1e-3 -bcType=4 -nx=40 -ny=40 -maxIter=100 -funcDefFile=coupledSystemNonUniformTLFuncDef -f=testResults

% newton readIC from picard results
runShell -case=coupledSystem -nonlinear -saveIC -solver=newton -tol=1e-3 -bcType=4 -nx=40 -ny=40 -maxIter=100 -funcDefFile=coupledSystemNonUniformTLFuncDef -f=testResultsNewton -readICResult1=testResults

05/22/2017: call batchRun to generate all results:
batchRun.pl -run=convRate > batchRunConvRate.log
batchRun.pl -run=bifurcation > batchRunBifurcation.log
batchRun.pl -run=bifurcationPAC > batchRunBifurcationPAC.log
batchRun.pl -run=nonuniformTL -solver=fsolve > batchRunNonuniformTLFsolve.log
batchRun.pl -run=nonuniformTL -solver=newton > batchRunNonuniformTLNewton.log
batchRun.pl -run=nonuniformTL -solver=exPicard > batchRunNonuniformTLExPicard.log
batchRun.pl -run=nonuniformTL -solver=imPicard > batchRunNonuniformTLImPicard.log



05/19/2017: add option implicitFactor to combine ex and imPicard methods -implicitFactor=0.5


05/17/2017: try lower branch runs
runShell -case=coupledSystem -nonlinear -saveIC -solver=fsolve -tol=1.000000e-03 -bcType=5 -nx=40 -ny=40 -maxIter=100 -f=bifurcationTest1c -funcDefFile=bifurcationFuncDef3 -xi=-4000 
runShell -case=coupledSystem -nonlinear -saveIC -solver=fsolve -tol=1.000000e-03 -bcType=5 -nx=40 -ny=40 -maxIter=100 -f=bifurcationTest1c -funcDefFile=coupledSystemNonUniformTLFuncDef


05/16/2017: implemented mixed bc CS and CF using a smooth-transition function omega
bifurcationRun -bcType=5 -xiMin=-4000 -dxi=50 -maxIter=100 -tol=1e-3 -solver1=fsolve -solver2=fsolve -solver3=fsolve  

runShell -case=coupledSystem -funcDefFile=coupledSystemTestFuncDef -solver=exPicard -nx=40 -ny=40 -bcType=4 -f=testResults -nonlinear -tol=1e-3 -maxIter=100

convRate now includes bcType 4 and 5. For biharmonic, we compute convRate for bcTypes=[1,2,3,4,5]
                                      For coupledSystem, we compute convRate for bcTypes=[1,2,4,5]. Free BC is too hard for coupled system

NOTE: newton and fsolve wont converge for bcType=4 and 5
      both picard methods works well


05/12/2017:
new function: bifurcationRun -options
to plot bifurcation results:
plotBifurcation(resultsName,color,showIC,distBranch);
color='r','g'...ect, to use this color
distBranch=false to use different shape for different branch
showIC=true to plot initial guess as well (optional)

eg: plotBifurcation -f=bifurcationTest -showIC -color=g -distBranch

05/08/2017:
try 320*320 
matlab -nodisplay -r 'bifurcationRun;exit;'>bifurcationNIN.log


05/08/2017:
now we can get ic in the tangent direction by providing two previuos results
-readICResult1=<resultsDir1> -readICResult2=<resultsDir2>
or just use a previous result by just providing
-readICResult1=<resultsDir1>


05/07/2017: 
now we can define wi(x,y) inside of funcDefFile to specify initial guess
or pass a filename to -readICFile=<ICfilename> to use ic data inside a file
if nothing is given to runShell, use w0 as initial guess by default.

to saveICFile pass: -saveICFile=<ICFileName>
runShell -case=coupledSystem -solver=newton -funcDefFile=bifurcationFuncDef -nx=320 -ny=320 -bcType=2 -f=bifurcationTestResults -saveICFile=bifurIC -nonlinear -tol=1e-6 -maxIter=200

to read ICFile pass: -readICFile=<ICFileName>
runShell -case=coupledSystem -solver=newton -funcDefFile=bifurcationFuncDef -nx=320 -ny=320 -bcType=2 -f=bifurcationTestResults -readICFile=bifurIC -nonlinear -tol=1e-6 -maxIter=200

to update ICFile after each run (which is needed by continuation method), pass both -readICFile and -saveICFile with the same filename

05/05/2017:
trying to get the bifurcation diagram:
runShell -case=coupledSystem -solver=newton -funcDefFile=bifurcationFuncDef -nx=320 -ny=320 -bcType=2 -f=bifurcationTestResults -nonlinear -tol=1e-6 -maxIter=200




05/04/2017:
% test conv rate for free bc:
runShell -noplot -case=coupledSystem -solver=fsolve -funcDefFile=coupledSystemTestFuncDef -nx=320 -ny=320 -bcType=3 -f=testResultsFreeG32 -nonlinear -tol=1e-3 -maxIter=100



use batchRun.pl to do all the runs. I disabled multithread; i dont have enought memory to do all of them at the 
same time. So just do it one by one. 
In batchRun, the following cases were simulated:

$rEnd=6;
@cmds = (
    #biharmonic conv test
    "convRate -case=biharmonic -test=biharmTrigTest -run -noplot -rStart=1 -rEnd=$rEnd",
    "convRate -case=biharmonic -test=biharmPolyTest -run -noplot -rStart=1 -rEnd=$rEnd",
    #nonlinear coupled system conv test
    "convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd -nonlinear",
    "convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd -nonlinear",
    "convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd -nonlinear",
    "convRate -case=coupledSystem -solver=newton -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd -nonlinear",
    #linear coupled system conv test
    "convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd",
    "convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd",
    "convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd",
    "convRate -case=coupledSystem -solver=newton -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=$rEnd"
    );





runShell -case=coupledSystem -solver=fsolve -funcDefFile=coupledSystemTestFuncDef -nx=40 -ny=40 -bcType=2 -f=testResults -nonlinear -tol=1e-3 -maxIter=100
convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5 -nonlinear
convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5 -nonlinear
convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5 -nonlinear
convRate -case=coupledSystem -solver=newton -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5 -nonlinear

plot:
convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest  -rStart=1 -rEnd=5 -nonlinear
convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -rStart=1 -rEnd=5 -nonlinear
convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -rStart=1 -rEnd=5 -nonlinear
convRate -case=coupledSystem -solver=newton -test=coupledSystemTest -rStart=1 -rEnd=5 -nonlinear


05/02/2017:
newton solver is added. To use it pass option -solver=newton 


05/01/2017: get the analytical Jacobian matrix for fsolve now!! works for bcType=1,2,3

rerun convRate for linear coupled system:

convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5

to plot
convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -rStart=1 -rEnd=5


04/27/2017: implemented option -useLU for coupledSystem but it seems slower to useLU....
           DO NOT -useLU!!!! 
convRate works for coupledSystem now!!!

to run: 
convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -run  -noplot -rStart=1 -rEnd=5

fsolve out of memory on grid G32...

to plot:
convRate -case=coupledSystem -solver=exPicard -test=coupledSystemTest -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=imPicard -test=coupledSystemTest -rStart=1 -rEnd=5
convRate -case=coupledSystem -solver=fsolve -test=coupledSystemTest -rStart=1 -rEnd=5



04/26/2017: more options for coupled system:
runShell -case=coupledSystem -solver=fsolve -nx=40 -ny=40 -bcType=3 -f=testResults -nonlinear -tol=1e-3 -maxIter=100

04/25/2017: coupled system:
runShell -case=coupledSystem -solver=fsolve -nx=20 -ny=20 -bcType=1  -f=testResults -nonlinear


04/20/2017: created a perl script to do batchRun.pl using multithread.
now we can use batchRun.pl to do all the runs in multithreads:

Somehow the profile won't work in background. It's probabily a matlab issue....
As an alternative, ran in screen, so I can detach from the server.

batchRun.pl > batchRun.log



04/19/2017: to compute convRate:
(to run without plot):
convRate -case=biharmonic -test=biharmTrigTest -run -noplot -rStart=1 -rEnd=6 
convRate -case=biharmonic -test=biharmPolyTest -run  -noplot -rStart=1 -rEnd=6

(to plot without run)
convRate -case=biharmonic -test=biharmTrigTest -rStart=1 -rEnd=6
convRate -case=biharmonic -test=biharmPolyTest -rStart=1 -rEnd=6

04/18/2017: we have two exact solutions: trig and poly 
            (defined in biharmTrigTestRHS.m and  biharmPolyTestRHS.m)
runShell -nx=20 -ny=20 -bcType=3 -savePlot -f=testResults -funcDefFile=biharmPolyTestFuncDef
runShell -nx=20 -ny=20 -bcType=3 -savePlot -f=testResults -funcDefFile=biharmTrigTestFuncDef

04/18/2017: convRate.m is the script to do convergence study automatically.

04/17/2017: add more options to runShell
runShell -nx=20 -ny=20 -bcType=3 -savePlot -funcDefFile=biharmTrigTestFuncDef -f=testResults

04/13/2017
runShell -nx=50 -ny=100 -xa=1 -xb=3 -ya=0 -yb=10