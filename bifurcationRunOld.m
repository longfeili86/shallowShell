% This script solves for the bifurcation diagram for the coupled nonlinear
% 
% Hangjie Ji
% Longfei Li
%%%%%%%%%%%%%%%%%%%%%%%%%%
%clear
clc
close all

bcType=2;
n=40;
xi_min=-8000;
xi_max=-4000.;
dTvalue=100;
maxIter=100;
tol=1e-5;
relaxFactor=1; % relaxation only implemented for newton. This value won't be seen by other methods
solver1='newton'; %solver for top branch
solver2='newton'; %solver for middle branch
solver3='newton'; %solver for lower branch

tic
% top branch goes from 0 ti xi_min (a)
ThermalLoading = xi_max; %initial guess for the first one is 0*w0 defined in bifurcationFuncDef1.m
dT = -dTvalue; 
counter=1;
exitflag = runShell(...
        '-case=coupledSystem', ...
         sprintf('-xi=%e',ThermalLoading),...
        '-funcDefFile=bifurcationFuncDef1',...
        '-nonlinear',...
        '-saveIC',...
        sprintf('-tol=%e',tol),...
        sprintf('-solver=%s',solver1),...
        sprintf('-bcType=%i',bcType),...
        sprintf('-nx=%i',n),...
        sprintf('-ny=%i',n),...
        sprintf('-f=bifurcationTestResults%ia',counter),...
        sprintf('-maxIter=%i',maxIter),...
        '-noplot');
 
 counter=counter+1;
 ThermalLoading=ThermalLoading+dT;
exitflag = runShell(...
        '-case=coupledSystem', ...
         sprintf('-xi=%e',ThermalLoading),...
        '-funcDefFile=bifurcationFuncDef1',...
        '-nonlinear',...
        '-saveIC',...
        sprintf('-tol=%e',tol),...
        sprintf('-solver=%s',solver1),...
        sprintf('-bcType=%i',bcType),...
        sprintf('-nx=%i',n),...
        sprintf('-ny=%i',n),...
        sprintf('-f=bifurcationTestResults%ia',counter),...
        sprintf('-maxIter=%i',maxIter),...
        '-noplot');
    
while(ThermalLoading>xi_min && exitflag>0)
    counter=counter+1;
    ThermalLoading = ThermalLoading+dT;
    exitflag = runShell(...
                    sprintf('-xi=%e',ThermalLoading),...
                    '-case=coupledSystem', ...
                    '-funcDefFile=bifurcationFuncDef1',...
                    '-nonlinear',...
                    '-saveIC',...
                    sprintf('-tol=%e',tol),...
                    sprintf('-readICResult1=%s',sprintf('bifurcationTestResults%ia',counter-1)),...
                    sprintf('-readICResult2=%s',sprintf('bifurcationTestResults%ia',counter-2)),...                  
                    sprintf('-solver=%s',solver1),...
                    sprintf('-bcType=%i',bcType),...                    
                    sprintf('-nx=%i',n),...
                    sprintf('-ny=%i',n),...
                    sprintf('-f=bifurcationTestResults%ia',counter),...
                    sprintf('-maxIter=%i',maxIter),...
                    '-noplot');
    if(exitflag<=0)
        counter=counter-1; % this run is not valid. Do not count it
    end
end
 
xi_min=ThermalLoading; % replace xi_min to where the top branch stopped
nTop=counter;
xiTop=ThermalLoading;

% for the lower branch (3): from xi_min to as far as it can go
load(sprintf('bifurcationTestResults%ia/results.mat',counter),'x');
x0=-x; % use the negative results of the top branch as the initial guess for the lower branch
dlmwrite('bifurIC3.dat',x0);

dT = dTvalue; 
counter=1; % reset counter
ThermalLoading=xi_min;
exitflag = runShell(...
                    sprintf('-xi=%e',ThermalLoading),...
                    '-case=coupledSystem', ...
                    '-funcDefFile=bifurcationFuncDef2',...
                    '-nonlinear',...
                    '-saveIC',...
                    sprintf('-solver=%s',solver3),...
                    sprintf('-bcType=%i',bcType),...                    
                    sprintf('-nx=%i',n),...
                    sprintf('-ny=%i',n),...
                    sprintf('-f=bifurcationTestResults%ic',counter),...
                    '-noplot',...
                    '-readICFile=bifurIC3',...
                    sprintf('-maxIter=%i',maxIter));
             
  counter=counter+1;              
 ThermalLoading=ThermalLoading+dT;
exitflag = runShell(...
                    sprintf('-xi=%e',ThermalLoading),...
                    '-case=coupledSystem', ...
                    '-funcDefFile=bifurcationFuncDef2',...
                    '-nonlinear',...
                    '-saveIC',...
                    sprintf('-solver=%s',solver3),...
                    sprintf('-bcType=%i',bcType),...                    
                    sprintf('-nx=%i',n),...
                    sprintf('-ny=%i',n),...
                    sprintf('-f=bifurcationTestResults%ic',counter),...
                    '-noplot',...
                    '-readICFile=bifurIC3',...
                    sprintf('-maxIter=%i',maxIter));               
    
while(ThermalLoading<xi_max && exitflag>0)
    counter=counter+1;
    ThermalLoading = ThermalLoading+dT;
    exitflag = runShell(...
                        sprintf('-xi=%e',ThermalLoading),...
                        '-case=coupledSystem', ...
                        '-funcDefFile=bifurcationFuncDef1',...
                        '-nonlinear',...
                        '-saveIC',...
                        sprintf('-readICResult1=%s',sprintf('bifurcationTestResults%ic',counter-1)),...
                        sprintf('-readICResult2=%s',sprintf('bifurcationTestResults%ic',counter-2)),...                      
                        sprintf('-solver=%s',solver3),...
                        sprintf('-bcType=%i',bcType),...                    
                        sprintf('-nx=%i',n),...
                        sprintf('-ny=%i',n),...
                        sprintf('-f=bifurcationTestResults%ic',counter),...
                        '-noplot',...
                        sprintf('-maxIter=%i',maxIter),...
                        '-maxIter=50');
        if(exitflag<=0)
            counter=counter-1; % this run is not valid. Do not count it
        end                    
end


nLower=counter;
xiLower=ThermalLoading;


% for the middle branch: from xi_min to as far as it can go
dT = dTvalue; 
ThermalLoading =xi_min;
counter=1;
exitflag = runShell(sprintf('-xi=%e',ThermalLoading),...
                '-case=coupledSystem', ...
                '-funcDefFile=bifurcationFuncDef1',...
                '-nonlinear',...
                '-saveIC',...
                sprintf('-solver=%s',solver2),...
                sprintf('-bcType=%i',bcType),...
                sprintf('-nx=%i',n),...
                sprintf('-ny=%i',n),...
                sprintf('-f=bifurcationTestResults%ib',counter),...
                '-noplot',...
                sprintf('-maxIter=%i',maxIter));
     
            % try two level initial guess for middle branch
 counter=counter+1;
 ThermalLoading = ThermalLoading+dT;
 exitflag = runShell(sprintf('-xi=%e',ThermalLoading),...
                '-case=coupledSystem', ...
                '-funcDefFile=bifurcationFuncDef1',...
                '-nonlinear',...
                '-saveIC',...
                sprintf('-solver=%s',solver2),...
                sprintf('-bcType=%i',bcType),...
                sprintf('-nx=%i',n),...
                sprintf('-ny=%i',n),...
                sprintf('-f=bifurcationTestResults%ib',counter),...
                '-noplot',...
                sprintf('-maxIter=%i',maxIter));           

while(ThermalLoading<xi_max && exitflag>0)
    counter=counter+1;
    ThermalLoading = ThermalLoading+dT;
    exitflag = runShell(sprintf('-xi=%e',ThermalLoading),...
                '-case=coupledSystem', ...
                '-funcDefFile=bifurcationFuncDef1',...
                '-nonlinear',...
                '-saveIC',...
                sprintf('-relaxFactor=%e',relaxFactor),....
                sprintf('-readICResult1=%s',sprintf('bifurcationTestResults%ib',counter-1)),...
                sprintf('-readICResult2=%s',sprintf('bifurcationTestResults%ib',counter-2)),...              
                sprintf('-solver=%s',solver2),...
                sprintf('-bcType=%i',bcType),...
                sprintf('-nx=%i',n),...
                sprintf('-ny=%i',n),...
                sprintf('-f=bifurcationTestResults%ib',counter),...
                '-noplot',...
                sprintf('-maxIter=%i',maxIter));
         if(exitflag<=0)
            counter=counter-1; % this run is not valid. Do not count it
        end           
end

nMiddle=counter;
xiMiddle=ThermalLoading;

toc;
fprintf('Top branch stopped at xi=%e\n',xiTop);
fprintf('Number results=%i\n',nTop);
fprintf('Middle branch stopped at xi=%e\n',xiMiddle);
fprintf('Number results=%i\n',nMiddle);
fprintf('Lower branch stopped at xi=%e\n',xiLower);
fprintf('Number results=%i\n',nLower);


